{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dd4337f1-0132-4b91-9d0e-57bbcd2605d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\1340934\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\tf_keras\\src\\losses.py:2976: The name tf.losses.sparse_softmax_cross_entropy is deprecated. Please use tf.compat.v1.losses.sparse_softmax_cross_entropy instead.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-26 12:43:20.641 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-26 12:43:20.643 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-26 12:43:20.909 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\1340934\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-05-26 12:43:20.910 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-26 12:43:20.910 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-26 12:43:20.912 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-26 12:43:20.913 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-26 12:43:20.913 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-26 12:43:20.914 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-26 12:43:20.914 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-26 12:43:20.916 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-26 12:43:20.918 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-26 12:43:20.920 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "from deepface import DeepFace\n",
    "import pandas as pd\n",
    "from fpdf import FPDF\n",
    "import matplotlib.pyplot as plt\n",
    "import io\n",
    "\n",
    "# --- Page Title ---\n",
    "st.set_page_config(page_title=\"Art Therapy AI\", layout=\"wide\")\n",
    "st.title(\"Art Therapy AI - Multi-Art Emotional Analysis\")\n",
    "st.write(\"Upload your artwork(s) to analyze the emotions behind them and receive therapeutic insights.\")\n",
    "\n",
    "# --- File Upload ---\n",
    "uploaded_files = st.file_uploader(\n",
    "    \"Upload your artworks (JPEG/PNG)\",\n",
    "    accept_multiple_files=True,\n",
    "    type=['jpg', 'jpeg', 'png']\n",
    ")\n",
    "\n",
    "# --- Utility Functions ---\n",
    "def dominant_colors(image, num_colors=3):\n",
    "    image = image.resize((100, 100))\n",
    "    pixels = np.array(image).reshape(-1, 3)\n",
    "    colors, counts = np.unique(pixels, axis=0, return_counts=True)\n",
    "    top_colors = colors[counts.argsort()[-num_colors:]]\n",
    "    return top_colors.tolist()\n",
    "\n",
    "def interpret_emotion(emotion):\n",
    "    main = max(emotion, key=emotion.get)\n",
    "    if main == 'sad':\n",
    "        return \"There may be emotional heaviness or introspection in this piece.\"\n",
    "    elif main == 'happy':\n",
    "        return \"This artwork reflects joy or contentment.\"\n",
    "    elif main == 'angry':\n",
    "        return \"Possible frustration or passion is expressed here.\"\n",
    "    elif main == 'fear':\n",
    "        return \"This piece may contain anxiety or vulnerability.\"\n",
    "    elif main == 'surprise':\n",
    "        return \"An element of spontaneity or curiosity is visible.\"\n",
    "    elif main == 'disgust':\n",
    "        return \"There could be discomfort or rejection being processed.\"\n",
    "    else:\n",
    "        return \"Mixed emotions or neutral state expressed.\"\n",
    "\n",
    "def therapy_prompt(emotion):\n",
    "    main = max(emotion, key=emotion.get)\n",
    "    prompts = {\n",
    "        'sad': \"Draw something that brings you peace or comfort.\",\n",
    "        'happy': \"Try creating something that celebrates your joy.\",\n",
    "        'angry': \"Channel your anger into abstract, bold visuals.\",\n",
    "        'fear': \"Illustrate a place where you feel safe.\",\n",
    "        'surprise': \"Make something unexpected with freeform shapes.\",\n",
    "        'disgust': \"Express what you need to release or reject.\"\n",
    "    }\n",
    "    return prompts.get(main, \"Express how you feel using color and form.\")\n",
    "\n",
    "def create_bar_chart(emotion_df):\n",
    "    plt.figure(figsize=(6,4))\n",
    "    avg_emotions = emotion_df.mean().sort_values(ascending=False)\n",
    "    avg_emotions.plot(kind='bar', color='skyblue')\n",
    "    plt.title('Average Emotional Profile')\n",
    "    plt.ylabel('Average Intensity')\n",
    "    plt.tight_layout()\n",
    "    buf = io.BytesIO()\n",
    "    plt.savefig(buf, format='png')\n",
    "    plt.close()\n",
    "    buf.seek(0)\n",
    "    return buf\n",
    "\n",
    "def rgb_to_hex(rgb):\n",
    "    return '#%02x%02x%02x' % tuple(rgb)\n",
    "\n",
    "def add_color_block(pdf, rgb_color, size=10):\n",
    "    hex_color = rgb_to_hex(rgb_color)\n",
    "    r, g, b = rgb_color\n",
    "    pdf.set_fill_color(r, g, b)\n",
    "    pdf.cell(size, size, \"\", ln=0, fill=True)\n",
    "\n",
    "# --- Main Analysis Loop ---\n",
    "all_emotions = []\n",
    "all_journals = []\n",
    "all_images = []\n",
    "\n",
    "if uploaded_files:\n",
    "    for idx, file in enumerate(uploaded_files):\n",
    "        st.markdown(f\"### Artwork {idx+1}: {file.name}\")\n",
    "        img = Image.open(file)\n",
    "        st.image(img, use_column_width=True)\n",
    "\n",
    "        with st.spinner(\"Analyzing...\"):\n",
    "            result = DeepFace.analyze(img_path=np.array(img), actions=['emotion'], enforce_detection=False)\n",
    "            emotion = result[0]['emotion']\n",
    "            colors = dominant_colors(img)\n",
    "\n",
    "        all_emotions.append(emotion)\n",
    "        all_images.append(img)\n",
    "\n",
    "        # Journal input for this artwork\n",
    "        journal_note = st.text_area(\n",
    "            f\"Your reflections for Artwork {idx+1} ({file.name}):\",\n",
    "            key=f\"journal_{idx}\"\n",
    "        )\n",
    "        all_journals.append(journal_note)\n",
    "\n",
    "        # Display Results\n",
    "        st.subheader(\"Detected Emotions\")\n",
    "        st.json(emotion)\n",
    "\n",
    "        st.subheader(\"Therapy Interpretation\")\n",
    "        st.write(interpret_emotion(emotion))\n",
    "\n",
    "        st.subheader(\"Creative Therapy Prompt\")\n",
    "        st.info(therapy_prompt(emotion))\n",
    "\n",
    "        st.subheader(\"Dominant Colors (RGB)\")\n",
    "        st.write(colors)\n",
    "\n",
    "        st.markdown(\"---\")\n",
    "\n",
    "    # --- Cumulative Analysis ---\n",
    "    st.header(\"Cumulative Emotional Profile\")\n",
    "    df = pd.DataFrame(all_emotions)\n",
    "    avg_emotions = df.mean().sort_values(ascending=False)\n",
    "    st.bar_chart(avg_emotions)\n",
    "\n",
    "    dominant_overall = avg_emotions.idxmax()\n",
    "    st.subheader(f\"Most Frequent Emotion Across Artworks: **{dominant_overall}**\")\n",
    "    st.write(interpret_emotion({dominant_overall: 100}))\n",
    "\n",
    "    # Display all journal notes\n",
    "    st.header(\"Your Reflections Journal\")\n",
    "    for idx, note in enumerate(all_journals):\n",
    "        if note.strip():\n",
    "            st.markdown(f\"**Artwork {idx+1} ({uploaded_files[idx].name}):**\")\n",
    "            st.write(note)\n",
    "            st.markdown(\"---\")\n",
    "\n",
    "    # --- PDF Export ---\n",
    "\n",
    "    if st.button(\"Download PDF Report\"):\n",
    "\n",
    "        pdf = FPDF()\n",
    "        pdf.set_auto_page_break(auto=True, margin=15)\n",
    "        pdf.add_page()\n",
    "        pdf.set_font(\"Arial\", 'B', 16)\n",
    "        pdf.cell(0, 10, \"Art Therapy AI - Emotional Analysis Report\", ln=True, align='C')\n",
    "        pdf.ln(10)\n",
    "\n",
    "        # Add each artwork section\n",
    "        for idx, (img, emotion, journal, file) in enumerate(zip(all_images, all_emotions, all_journals, uploaded_files)):\n",
    "            pdf.set_font(\"Arial\", 'B', 14)\n",
    "            pdf.cell(0, 10, f\"Artwork {idx+1}: {file.name}\", ln=True)\n",
    "\n",
    "            # Save img temporarily in memory and add to PDF\n",
    "            img_buffer = io.BytesIO()\n",
    "            img.thumbnail((150, 150))\n",
    "            img.save(img_buffer, format='PNG')\n",
    "            img_buffer.seek(0)\n",
    "            pdf.image(img_buffer, w=50)\n",
    "            pdf.ln(55)\n",
    "\n",
    "            # Emotions\n",
    "            main_emotion = max(emotion, key=emotion.get)\n",
    "            pdf.set_font(\"Arial\", '', 12)\n",
    "            pdf.cell(0, 8, \"Detected Emotions:\", ln=True)\n",
    "            for emo, val in emotion.items():\n",
    "                indicator = \"->\" if emo == main_emotion else \"  \"\n",
    "                pdf.cell(0, 6, f\"{indicator} {emo.capitalize()}: {val:.2f}%\", ln=True)\n",
    "\n",
    "            pdf.ln(4)\n",
    "            pdf.cell(0, 8, \"Therapy Interpretation:\", ln=True)\n",
    "            pdf.multi_cell(0, 6, interpret_emotion(emotion))\n",
    "            pdf.ln(2)\n",
    "            pdf.cell(0, 8, \"Creative Therapy Prompt:\", ln=True)\n",
    "            pdf.multi_cell(0, 6, therapy_prompt(emotion))\n",
    "            pdf.ln(2)\n",
    "\n",
    "            # Dominant Colors\n",
    "            pdf.cell(0, 8, \"Dominant Colors:\", ln=True)\n",
    "            for color in dominant_colors(img):\n",
    "                add_color_block(pdf, color)\n",
    "                pdf.cell(5, 10, \" \", ln=0)\n",
    "            pdf.ln(15)\n",
    "\n",
    "            # Journal\n",
    "            if journal.strip():\n",
    "                pdf.cell(0, 8, \"Your Reflection:\", ln=True)\n",
    "                pdf.multi_cell(0, 6, journal)\n",
    "                pdf.ln(5)\n",
    "\n",
    "            pdf.line(10, pdf.get_y(), 200, pdf.get_y())\n",
    "            pdf.ln(10)\n",
    "\n",
    "        # Add cumulative emotional profile chart as image\n",
    "        pdf.add_page()\n",
    "        pdf.set_font(\"Arial\", 'B', 14)\n",
    "        pdf.cell(0, 10, \"Cumulative Emotional Profile\", ln=True, align='C')\n",
    "\n",
    "        chart_buf = create_bar_chart(df)\n",
    "        pdf.image(chart_buf, x=25, w=160)\n",
    "        pdf.ln(10)\n",
    "\n",
    "        pdf.set_font(\"Arial\", '', 12)\n",
    "        pdf.cell(0, 10, f\"Most Frequent Emotion Across Artworks: {dominant_overall.capitalize()}\", ln=True)\n",
    "        pdf.multi_cell(0, 6, interpret_emotion({dominant_overall: 100}))\n",
    "\n",
    "        # Output PDF as bytes and provide download\n",
    "        pdf_output = pdf.output(dest='S').encode('latin1')\n",
    "        st.download_button(\n",
    "            label=\"Download PDF\",\n",
    "            data=pdf_output,\n",
    "            file_name=\"art_therapy_report.pdf\",\n",
    "            mime=\"application/pdf\"\n",
    "        )\n",
    "\n",
    "else:\n",
    "    st.info(\"Upload one or more artworks to begin analysis.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
